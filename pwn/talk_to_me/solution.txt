`talk` will print out whatever is in `words.txt`. `talk` also has the setuid
bit set and is owned by root, meaning it will execute with root permissions.
If there were no permission checks then one could replace `words.txt` with a
symlink to `flag` and the program would print out its contents.

`talk` tries (unsucessfully) to combat this exploit by first checking if the
user who started it has permissions to access `words.txt` (or, if it is a
symlink, the location it points to). However, the check and read operations are
not atomic. If the file changes between these two events, `talk` will read it
as if nothing is wrong. This is a classic "time of check to time of use"
(TOCTOU) bug - an instance of a race condition.

To exploit the bug and retrieve the flag, create and run two scripts:
* The first script runs `talk` repeatedly in an infinite loop
* The second script repeatedly switches `words.txt` back and forth between
  being a symlink to `flag` and a regular text file in an infinite loop

Eventually (should take less than 30 seconds), `talk` will do the access check
when `words.txt` is a regular text file, but read it after the second script
switches it to a symlink to `flag`, and the flag will be printed out.

It is also possible to solve this by setting a breakpoint right before the
file is opened, manually doing the swap, and then resuming execution, but
this is not always possible in the real world.

flag{h1c0ry_d1c0ry_d0c}