It is assumed that a method of decryption using the padding oracle has been
developed (see the solution to part 1).

Recall CBC encryption is defined as:

  C[i] = Enc(P[i] XOR C[i-1])

and decryption is defined as:

  P[i] = Dec(C[i]) XOR C[i-1]

To encrypt a message, we will construct a C[i-1] for each block such that it
produces P[i] when XORed with Dec(C[i]).

1) Partition the plaintext into blocks of size 16 (AES block length) and apply
   padding if necessary.

2) Create an arbitrary block of any 16 bytes. This will be the final block
   of ciphertext. Using an IV of all 0s, "decrypt" the new block C[n] using
   the padding oracle. This effectively calculates:

    P[n] = Dec(C[n]) XOR IV
         = Dec(C[n])

   We can now choose a value for C[n-1] that will produce P[n] when XORed
   with Dec(C[n]) during decryption:

    C[n-1] = P[n] XOR Dec(C[n])

3) Repeat step (2) using its previous output (C[n-1]) as input - instead
   of generating a block of arbitrary bytes as the "encrypted" block,
   use C[n-1] and find a block for C[n-2] that satisfies

    P[n-1] = Dec(C[n-1]) XOR C[n-2]

   Repeat this until every block of the plaintext is encrypted. IV=C[0].

Encrypt the string "secret=flag{s3rge_wou1d_b3_pr0ud};user=evilcorp" using
the padding oracle and submit it for verification to get the flag.

flag{wh3r3_4re_th3_ch1ptune5}
